.Logger: ClassType

.Handler: ClassType

.Formatter: ClassType

.Filter: ClassType

.LogRecord: ClassType
.LogRecord.
    name: Str
    level: Nat
    pathname: Str
    lineno: Nat
    msg: Str
    args: GenericTuple
    exc_info: GenericTuple
    func: Str or NoneType
    sinfo: Str or NoneType
    getMessage: (self: .LogRecord) -> Str

.LoggerAdaptor: ClassType

.getLogger: (name: Str or NoneType := NoneType) -> .Logger
.getLoggerClass: () -> ClassType
.getLogRecordFactory: () -> ClassType
.debug!: (msg: Str, args := GenericTuple, kwargs := GenericDict) => NoneType
.info!: (msg: Str, args := GenericTuple, kwargs := GenericDict) => NoneType
.warning!: (msg: Str, args := GenericTuple, kwargs := GenericDict) => NoneType
.error!: (msg: Str, args := GenericTuple, kwargs := GenericDict) => NoneType
.critical!: (msg: Str, args := GenericTuple, kwargs := GenericDict) => NoneType
.exception!: (msg: Str, args := GenericTuple, kwargs := GenericDict) => NoneType
.log!: (level: Nat, msg: Str, args := GenericTuple, kwargs := GenericDict) => NoneType
.disable!: (level := Nat) => NoneType
.addLevelName!: (level: Nat, levelName: Str) => NoneType
.getLevelNamesMapping!: () => GenericDict
.getLevelName!: (level: Nat) -> Str
.makeLogRecord!: (args: GenericTuple) -> .LogRecord
# TODO: stream
.basicConfig!: (level := Nat, format := Str, datefmt := Str, filename := Str, filemode := Str, stream := Obj) => NoneType
.shutdown!: () => NoneType
